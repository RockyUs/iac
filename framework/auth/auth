package auth

import (
	"fmt"

	"net/http"
	"time"

	"github.com/mdaxf/iac/config"
	"github.com/mdaxf/iac/logger"

	jwt "github.com/dgrijalva/jwt-go"
)

var jwtsecretKey = "IACFramework"

func Getenerate_authentication_tocken(userID string, loginName string, ClientID string) (string, string, string, error) {
	log := logger.Log{ModuleName: logger.API, User: "System", ControllerName: "Authorization"}
	log.Debug("Authorization function is called.")

	//Creating Access Token
	atClaims := jwt.MapClaims{}
	atClaims["authorized"] = true
	atClaims["user_id"] = userID
	atClaims["login_name"] = loginName
	atClaims["client_id"] = ClientID

	createdt := time.Now().Format("2006-01-02 15:04:05")
	expires := time.Now().Add(time.Minute * 15).Unix()
	atClaims["exp"] = expires

	at := jwt.NewWithClaims(jwt.SigningMethodHS256, atClaims)
	token, err := at.SignedString([]byte(jwtsecretKey))
	if err != nil {
		log.Error(fmt.Sprintf("Authorization Error:%s", err.Error()))
		return "", "", "", err
	}
	log.Debug(fmt.Sprintf("Authorization Token:%s", token))
	return token, createdt, string(expires), nil
}

func ValidateToken(tokenString string) (bool, error) {
	log := logger.Log{ModuleName: logger.API, User: "System", ControllerName: "Authorization"}
	log.Debug(fmt.Sprintf("Authorization validation function is called for tocken: %s ", tokenString))

	// Parse the token
	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		// Provide the secret key used during token generation
		secretKey := []byte(jwtsecretKey) // Replace with your actual secret key
		return secretKey, nil
	})
	if err != nil {

		log.Error(fmt.Sprintf("Failed to parse token:%s", err.Error()))
		return false, err
	}

	// Check if the token is valid
	if token.Valid {
		// Check if the token has expired
		claims, ok := token.Claims.(jwt.MapClaims)
		if !ok {

			log.Error(fmt.Sprintf("Invalid token claims: %s", tockenString))
			return false, err
		}

		expirationTime := claims["exp"].(float64)
		expiration := time.Unix(int64(expirationTime), 0)

		if expiration.Before(time.Now()) {

			log.Error(fmt.Sprintf("Token has expired: %s", tockenString))
			return false, err
		} else {
			log.Debug(fmt.Sprintf("Token is valid: %s", tockenString))

		}
	} else {
		log.Error(fmt.Sprintf("Token is invalid: %s", tockenString))

		return false, err
	}
	return true, nil
}
